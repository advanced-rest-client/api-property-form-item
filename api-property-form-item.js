import {PolymerElement} from '../../@polymer/polymer/polymer-element.js';
import {IronValidatableBehavior} from '../../@polymer/iron-validatable-behavior/iron-validatable-behavior.js';
import '../../@polymer/paper-input/paper-input.js';
import '../../@polymer/paper-button/paper-button.js';
import '../../@polymer/iron-icon/iron-icon.js';
import '../../@advanced-rest-client/arc-icons/arc-icons.js';
import '../../@polymer/paper-dropdown-menu/paper-dropdown-menu.js';
import '../../@polymer/paper-listbox/paper-listbox.js';
import '../../@polymer/paper-item/paper-item.js';
import '../../@polymer/paper-icon-button/paper-icon-button.js';
import '../../@polymer/paper-checkbox/paper-checkbox.js';
import {html} from '../../@polymer/polymer/lib/utils/html-tag.js';
import {mixinBehaviors} from '../../@polymer/polymer/lib/legacy/class.js';
/**
 * An element that renders a form input to edit API type value.
 *
 * This element is to replace deprecated `raml-type-form-input` that has
 * the same functionality but works with RAML data only.
 *
 * **If you need an element that works with Polymer 1.0, use old `raml-type-form-input` element**
 *
 * It accespt ARC view model generated by either `api-headers-editr`
 * or `api-url-data-model`. The model is generated using
 * `api-view-model-transformer` that transforms AMF `json/ld` API model
 * into data model consumable by ARC UI elements.
 *
 * ### Example
 *
 * ```html
 * <api-property-form-item model='{"inputLabel": "Enter value"}'
 *  name="propertyName" value="{{value}}"></raml-type-form-input>
 * ```
 *
 * ### Styling
 *
 * `<raml-type-form-input>` provides the following custom properties and mixins for styling:
 *
 * Custom property | Description | Default
 * ----------------|-------------|----------
 * `--raml-type-form-input` | Mixin applied to the element | `{}`
 * `--api-property-form-item-input-label-color` | Input's label color | `rgba(0, 0, 0, 0.74)`
 * `--api-property-form-item-input-label-required-color` | Input's label color when required | `rgba(0, 0, 0, 0.74)`
 * `--from-row-action-icon-color` | Theme variable, color of the action icon button | `--icon-button-color` or `rgba(0, 0, 0, 0.74)`
 * `--from-row-action-icon-color-hover` | Theme variable, color of the action icon button when hovered | `--accent-color` or `rgba(0, 0, 0, 0.74)`
 * `--from-row-action-icon-opacity` | Opacity of the action icon button | `0.54`
 * `--from-row-action-icon-opacity` | Opacity of the action icon button when hovered | `0.74`
 * `--arc-font-caption` | Theme mixin, applied to array values label | `{}`
 * `--raml-type-form-input-array-border-color` | Border color of the element when it is array type item | `rgba(0, 0, 0, 0.14)`
 *
 * Also, use mixins and variables for `paper-input`, `paper-dropdown-menu`,
 * `paper-listbox`, and `paper-item` to style this element.
 *
 * @customElement
 * @memberof ApiElements
 * @appliesMixin IronValidatableBehavior
 * @polymer
 * @demo demo/index.html
 */
class ApiPropertyFormItem extends mixinBehaviors(IronValidatableBehavior, PolymerElement) {
  static get template() {
    return html`
    <style>
    :host([required]) paper-input {
      --paper-input-container-label: {
        color: var(--api-property-form-item-input-label-color, var(--raml-type-form-input-required-label-color, rgba(0, 0, 0, 0.74)));
      };
    }

    :host([required]) paper-input {
      --paper-input-container-label: {
        color: var(--api-property-form-item-input-label-required-color, var(--raml-type-form-input-required-label-color-required, rgba(0, 0, 0, 0.72)));
        font-weight: 500;
      };
    }

    :host([is-array]) .content {
      padding-left: 8px;
      border-left: 1px var(--raml-type-form-input-array-border-color, rgba(0, 0, 0, 0.14)) solid;
    }

    :host([is-nillable]:not([is-array])) .content {
      @apply --layout-horizontal;
      @apply --layout-center;
    }

    .action-icon {
      color: var(--from-row-action-icon-color, var(--icon-button-color, rgba(0, 0, 0, 0.74)));
      transition: opacity 0.2s ease-in-out, color 0.2s ease-in-out;
    }

    .action-icon:hover {
      color: var(--from-row-action-icon-color-hover, var(--accent-color, rgba(0, 0, 0, 0.88)));
    }

    .array-item {
      @apply --layout-horizontal;
    }

    paper-input,
    paper-dropdown-menu {
      @apply --layout-flex;
    }

    paper-dropdown-menu {
      width: 100%;
    }

    paper-button iron-icon {
      margin-right: 12px;
    }

    label {
      @apply --arc-font-caption;
    }

    paper-item:hover {
      @apply --paper-item-hover;
    }

    .nil-option {
      margin-left: 8px;
    }
    </style>
    <div class="content">
      <template is="dom-if" if="[[isEnum]]">
        <paper-dropdown-menu label="[[model.schema.inputLabel]]" name="[[name]]" required="[[model.required]]" auto-validate="" data-type="enum" no-label-float="[[noLabelFloat]]" disabled="[[readonly]]">
          <paper-listbox slot="dropdown-content" attr-for-selected="data-value" selected="{{value}}">
            <template is="dom-repeat" items="[[model.schema.enum]]">
              <paper-item data-value\$="[[item]]">[[item]]</paper-item>
            </template>
          </paper-listbox>
        </paper-dropdown-menu>
      </template>
      <template is="dom-if" if="[[isBoolean]]">
        <paper-dropdown-menu label="[[model.schema.inputLabel]]" name="[[name]]" required="[[model.required]]" auto-validate="" data-type="boolean" no-label-float="[[noLabelFloat]]" disabled="[[readonly]]">
          <paper-listbox slot="dropdown-content" attr-for-selected="data-value" selected="{{value}}">
            <paper-item data-value="true">True</paper-item>
            <paper-item data-value="false">False</paper-item>
          </paper-listbox>
        </paper-dropdown-menu>
      </template>
      <template is="dom-if" if="[[isInput]]">
        <paper-input label="[[model.schema.inputLabel]]" value="{{value}}" required="[[model.required]]" pattern="[[model.schema.pattern]]" name="[[name]]" auto-validate="" type="[[model.schema.inputType]]" min="[[model.schema.minimum]]" max="[[model.schema.maximum]]" maxlength="[[model.schema.maxLength]]" minlength="[[model.schema.minLength]]" always-float-label="[[_computeAlwaysFloatLabel(model.schema.inputFloatLabel, model.schema.inputType)]]" placeholder="[[model.schema.inputPlaceholder]]" no-label-float="[[noLabelFloat]]" readonly="[[readonly]]" data-type="input"></paper-input>
      </template>
      <template is="dom-if" if="[[isArray]]">
        <label hidden\$="[[noLabelFloat]]">[[model.schema.inputLabel]]</label>
        <template is="dom-repeat" items="[[arrayValue]]" class="array-repeater">
          <div class="array-item">
            <paper-input label="Parameter value" value="{{item.value}}"
              required="[[model.required]]"
              pattern="[[model.schema.pattern]]"
              name="[[name]]" auto-validate=""
              type="[[model.schema.inputType]]" min="[[model.schema.minimum]]"
              max="[[model.schema.maximum]]" maxlength="[[model.schema.maxLength]]"
              minlength="[[model.schema.minLength]]" no-label-float=""
              on-input="_arrayValueChanged" readonly="[[readonly]]" data-type="array"></paper-input>
            <template is="dom-if" if="[[index]]">
              <paper-icon-button
                class="action-icon" suffix=""
                icon="arc:remove-circle-outline" on-click="_removeArrayValue"
                title="Remove array value" disabled="[[readonly]]"></paper-icon-button>
            </template>
          </div>
        </template>
        <div class="add-action">
          <paper-button on-click="addEmptyArrayValue" title="Add array velue button" disabled="[[readonly]]">
            <iron-icon class="action-icon" icon="arc:add-circle-outline" alt="Add array value icon"></iron-icon>
            Add array value
          </paper-button>
        </div>
      </template>
      <template is="dom-if" if="[[_renderNillable]]">
        <paper-checkbox class="nil-option" on-checked-changed="_nillableChanged">Nil</paper-checkbox>
      </template>
    </div>
`;
  }

  static get is() {
    return 'api-property-form-item';
  }
  static get properties() {
    return {
      /**
       * View model generated for this view.
       *
       * @type {Array<Object>}
       */
      model: {
        type: Array,
        observer: '_modelChanged'
      },
      /**
       * Name of the form item
       */
      name: {
        type: String,
        reflectToAttribute: true
      },
      /**
       * Input's value.
       */
      value: {
        type: String,
        notify: true
      },
      // Computed value, True if current item is a dropdown with values.
      isEnum: {
        type: Boolean,
        readOnly: true
      },
      // Computed value, True if current item is an regular input
      isInput: {
        type: Boolean,
        value: true,
        readOnly: true
      },
      // Computed value, True if current item is an array object
      isArray: {
        type: Boolean,
        reflectToAttribute: true,
        readOnly: true
      },
      // Computed value, True if current item is an union with nill value.
      isNillable: {
        type: Boolean,
        reflectToAttribute: true,
        readOnly: true
      },
      // Computed value, True if current item is a boolean value
      isBoolean: {
        type: Boolean,
        readOnly: true
      },
      // A value of an array item (only if `isArray` is set)
      arrayValue: {
        type: Array,
        readOnly: true
      },
      /**
       * When set, prohibits inputs to have floating labels
       */
      noLabelFloat: Boolean,
      /**
       * Set to indicate that the consol is required
       */
      required: {
        type: Boolean,
        reflectToAttribute: true
      },
      /**
       * When set the editor is in read only mode.
       */
      readonly: Boolean,
      // Computed value, renders nillable switch when needed.
      _renderNillable: {
        type: Boolean,
        computed: '_computeRenderNillable(isNillable, isArray)'
      }
    };
  }

  static get observers() {
    return [
      '_isArrayChanged(isArray, value)'
    ];
  }

  /**
   * Resets UI state variables
   */
  _resetStates() {
    this._setIsEnum(false);
    this._setIsInput(false);
    this._setIsArray(false);
    this._setIsBoolean(false);
    this._setIsNillable(false);
  }

  // Sets the template depending on model configuration
  _modelChanged(model) {
    this._resetStates();
    if (!model) {
      return;
    }
    const schema = model.schema;
    switch (true) {
      case schema.isEnum:
        this._setIsEnum(true);
        break;
      case schema.isArray:
        this._prepareArraySchema(model);
        break;
      case schema.isBool:
        this._setIsBoolean(true);
        break;
      default:
        this._setIsInput(true);
    }
    this._setIsNillable(!!schema.isNillable);
  }
  /**
   * Sets `arrayValue` from model's value.
   *
   * @param {Object} model ARC amf view model.
   */
  _prepareArraySchema(model) {
    this._setIsArray(true);
    let value;
    if (model.value && model.value instanceof Array) {
      value = model.value.map((item) => {
        return {
          value: item
        };
      });
    } else {
      value = [];
    }
    this._setArrayValue(value);
  }

  // Sets array values if needed
  _isArrayChanged(isArray) {
    if (this.__internalChange) {
      return;
    }
    const v = this.value;
    if (!v || !isArray) {
      this._setArrayValue(undefined);
      return;
    }
    this._setArrayValue(this._itemsForArray(v));
  }
  /**
   * The `dom-repeat` requires an object to properly support changes.
   * In order to do this simple values has to be transformed into objects.
   *
   * @param {Array<String>} value An array of values.
   * @return {Array}
   */
  _itemsForArray(value) {
    let result = [];
    if (value instanceof Array) {
      result = value.map(function(item) {
        return {
          value: item
        };
      });
    } else {
      result.push({
        value
      });
    }
    return result;
  }
  // Handles array value change and sets the `value` property.
  _arrayValueChanged() {
    let arr = this.arrayValue;
    if (arr) {
      arr = arr.map(function(item) {
        return item.value;
      });
    }
    this.__internalChange = true;
    this.set('value', arr);
    this.__internalChange = false;
  }
  /**
   * Adds new element to the array value.
   * @return {Number} Index of the value in the values array.
   * Note that the index may change over time if the user remove any value.
   */
  addEmptyArrayValue() {
    if (this.arrayValue) {
      this.push('arrayValue', {
        value: ''
      });
    } else {
      this.set('arrayValue', [{
        value: ''
      }]);
    }
    return this.arrayValue.length - 1;
  }
  /**
   * Removes an array value for given index.
   * @param {Number} index A position of the value in the array
   */
  removeArrayValue(index) {
    this.splice('arrayValue', index, 1);
    this._arrayValueChanged();
  }

  // Removes item from array value.
  _removeArrayValue(e) {
    const repeater = this.shadowRoot.querySelector('.array-repeater');
    const index = repeater.indexForElement(e.target);
    this.removeArrayValue(index);
  }
  /**
   * Fallback validator if form validator is unavailable.
   *
   * @return {Boolean} True if the constrol is valid.
   */
  _defaultValidator() {
    const m = this.model;
    if (!m) {
      return true;
    }
    if (!m.required) {
      return true;
    }
    return !!m.value;
  }
  _getValidity() {
    if (this._nilEnabled) {
      return true;
    }
    switch (true) {
      case this.isInput:
        const input = this.shadowRoot.querySelector('paper-input[data-type="input"]');
        return input ? input.validate() : this._defaultValidator();
      case this.isBoolean:
        const bool = this.shadowRoot.querySelector('paper-dropdown-menu[data-type="boolean"]');
        return bool ? bool.validate() : this._defaultValidator();
      case this.isEnum:
        const en = this.shadowRoot.querySelector('paper-dropdown-menu[data-type="enum"]');
        return en ? en.validate() : this._defaultValidator();
      case this.isArray:
        let inputs = this.shadowRoot.querySelectorAll('paper-input[data-type="array"]');
        for (let i = 0; i < inputs.length; i++) {
          if (!inputs[i].validate()) {
            return false;
          }
        }
        return true;
      default:
        return this._defaultValidator();
    }
  }
  /**
   * Computes value for `_renderNillable` property.
   *
   * @param {Boolean} isNillable
   * @param {Boolean} isArray
   * @return {Boolean}
   */
  _computeRenderNillable(isNillable, isArray) {
    return !!isNillable && !isArray;
  }
  /**
   * Controls value and input state when "nil" checkbox's value change.
   * @param {CustomEvent} e
   */
  _nillableChanged(e) {
    const {value} = e.detail;
    this._nilEnabled = value;
    const input = this._getInput();
    if (input) {
      input.disabled = value;
    }
    if (value) {
      this._oldNilValue = this.value;
      this.value = 'nil';
    } else {
      if (this._oldNilValue) {
        this.value = this._oldNilValue;
        this._oldNilValue = undefined;
      } else if (this.value === 'nil') {
        this.value = '';
      }
    }
  }
  /**
   * Finds input element in the DOM
   * @return {Element|undefined} An element that represents the main UI input
   * element or undefined for array types.
   */
  _getInput() {
    if (this.isEnum) {
      return this.shadowRoot.querySelector('paper-dropdown-menu[data-type="enum"]');
    }
    if (this.isBoolean) {
      return this.shadowRoot.querySelector('paper-dropdown-menu[data-type="boolean"]');
    }
    if (this.isInput) {
      return this.shadowRoot.querySelector('paper-input[data-type="input"]');
    }
  }
  /**
   * Computes value for paper-input's always-float-label attribute.
   * It forces label float for some types of inputs.
   * @param {Boolean} inputFloatLabel
   * @param {String} inputType
   * @return {Boolean}
   */
  _computeAlwaysFloatLabel(inputFloatLabel, inputType) {
    if (inputFloatLabel) {
      return inputFloatLabel;
    }
    return [
      'date', 'datetime', 'datetime-local', 'month', 'time', 'week', 'file'
    ].indexOf(inputType) !== -1;
  }
}

window.customElements.define(ApiPropertyFormItem.is, ApiPropertyFormItem);
