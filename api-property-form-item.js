import { html, css, LitElement } from 'lit-element';
import { ValidatableMixin } from '@anypoint-web-components/validatable-mixin/validatable-mixin.js';
import '@anypoint-web-components/anypoint-button/anypoint-button.js';
import '@polymer/iron-icon/iron-icon.js';
import '@advanced-rest-client/arc-icons/arc-icons.js';
import '@anypoint-web-components/anypoint-listbox/anypoint-listbox.js';
import '@anypoint-web-components/anypoint-item/anypoint-item.js';
import '@anypoint-web-components/anypoint-dropdown-menu/anypoint-dropdown-menu.js';
import '@anypoint-web-components/anypoint-button/anypoint-icon-button.js';
import '@anypoint-web-components/anypoint-checkbox/anypoint-checkbox.js';
import '@anypoint-web-components/anypoint-input/anypoint-input.js';
/**
 * An element that renders a form input to edit API type value.
 *
 * This element is to replace deprecated `raml-type-form-input` that has
 * the same functionality but works with RAML data only.
 *
 * **If you need an element that works with Polymer 1.0, use old `raml-type-form-input` element**
 *
 * It accespt ARC view model generated by either `api-headers-editr`
 * or `api-url-data-model`. The model is generated using
 * `api-view-model-transformer` that transforms AMF `json/ld` API model
 * into data model consumable by ARC UI elements.
 *
 * ### Example
 *
 * ```html
 * <api-property-form-item model='{"inputLabel": "Enter value"}'
 *  name="propertyName" value="{{value}}"></raml-type-form-input>
 * ```
 *
 * ### Styling
 *
 * `<raml-type-form-input>` provides the following custom properties and mixins for styling:
 *
 * Custom property | Description | Default
 * ----------------|-------------|----------
 * `--raml-type-form-input` | Mixin applied to the element | `{}`
 * `--api-property-form-item-input-label-color` | Input's label color | `rgba(0, 0, 0, 0.74)`
 * `--api-property-form-item-input-label-required-color` | Input's label color when required | `rgba(0, 0, 0, 0.74)`
 * `--from-row-action-icon-color` | Theme variable, color of the action icon button | `--icon-button-color` or `rgba(0, 0, 0, 0.74)`
 * `--from-row-action-icon-color-hover` | Theme variable, color of the action icon button when hovered | `--accent-color` or `rgba(0, 0, 0, 0.74)`
 * `--from-row-action-icon-opacity` | Opacity of the action icon button | `0.54`
 * `--from-row-action-icon-opacity` | Opacity of the action icon button when hovered | `0.74`
 * `--arc-font-caption` | Theme mixin, applied to array values label | `{}`
 * `--raml-type-form-input-array-border-color` | Border color of the element when it is array type item | `rgba(0, 0, 0, 0.14)`
 *
 * Also, use mixins and variables for `anypoint-input`, `paper-dropdown-menu`,
 * `anypoint-listbox`, and `anypoint-item` to style this element.
 *
 * @customElement
 * @memberof ApiElements
 * @appliesMixin IronValidatableBehavior
 * @polymer
 * @demo demo/index.html
 */
class ApiPropertyFormItem extends ValidatableMixin(LitElement) {
  static get styles() {
    return css`
    :host {
      display: inline-block;
      position: relative;
      /* <input> width */
      min-width: 200px;
    }

    :host([isarray]) .content {
      padding-left: 8px;
      border-left: 1px var(--raml-type-form-input-array-border-color, rgba(0, 0, 0, 0.14)) solid;
    }

    :host(:not([isarray])) .content {
      display: flex;
      flex-direction: row;
      align-items: center;
    }

    .action-icon {
      color: var(--from-row-action-icon-color, var(--icon-button-color, rgba(0, 0, 0, 0.74)));
      transition: opacity 0.2s ease-in-out, color 0.2s ease-in-out;
    }

    .action-icon:hover {
      color: var(--from-row-action-icon-color-hover, var(--accent-color, rgba(0, 0, 0, 0.88)));
    }

    .array-item {
      display: flex;
      flex-direction: row;
      align-items: center;
    }

    anypoint-input,
    anypoint-dropdown-menu {
      flex: 1;
      width: auto;
    }

    anypoint-button iron-icon {
      margin-right: 12px;
    }

    .nil-option {
      margin-left: 8px;
    }

    .array-label {
      margin-left: 8px;
    }`;
  }

  _enumTemplate() {
    const { model, name, readonly, value, outlined, legacy } = this;
    const values = model.schema.enum || [];
    return html`
    <anypoint-dropdown-menu
      name="${name}"
      ?required="${model.required}"
      autovalidate
      data-type="enum"
      ?disabled="${readonly}"
      ?outlined="${outlined}"
      ?legacy="${legacy}">
      <label slot="label">${model.schema.inputLabel}</label>
      <anypoint-listbox
        slot="dropdown-content"
        attrforselected="data-value"
        .selected="${value}"
        ?legacy="${legacy}"
        @selected-changed="${this._listSelectionHandler}">
        ${values.map((item) => html`<anypoint-item data-value="${item}">${item}</anypoint-item>`)}
      </anypoint-listbox>
    </anypoint-dropdown-menu>`;
  }

  _booleanTemplate() {
    const { model, name, readonly, value, outlined, legacy } = this;
    return html`
    <anypoint-dropdown-menu
      name="${name}"
      ?required="${model.required}"
      autovalidate
      data-type="boolean"
      ?disabled="${readonly}"
      ?outlined="${outlined}"
      ?legacy="${legacy}">
      <label slot="label">${model.schema.inputLabel}</label>
      <anypoint-listbox
        slot="dropdown-content"
        attrforselected="data-value"
        .selected="${value}"
        ?legacy="${legacy}"
        @selected-changed="${this._listSelectionHandler}">
        <anypoint-item data-value="true">True</anypoint-item>
        <anypoint-item data-value="false">False</anypoint-item>
      </anypoint-listbox>
    </anypoint-dropdown-menu>`;
  }

  _inputTemplate() {
    const { model, name, noLabelFloat, readonly, value, outlined, legacy } = this;
    if (!model) {
      return;
    }
    if (!model.schema) {
      model.schema = {};
    }
    return html`<anypoint-input
      .value="${value}"
      ?required="${model.required}"
      .pattern="${model.schema.pattern}"
      .name="${name}"
      autovalidate
      .type="${model.schema.inputType}"
      .min="${model.schema.minimum}"
      .max="${model.schema.maximum}"
      .maxLength="${model.schema.maxLength}"
      .minLength="${model.schema.minLength}"
      .placeholder="${model.schema.inputPlaceholder}"
      ?nolabelfloat="${noLabelFloat}"
      ?readonly="${readonly}"
      ?outlined="${outlined}"
      ?legacy="${legacy}"
      data-type="input"
      @input="${this._inputHandler}">
      <label slot="label">${model.schema.inputLabel}</label>
      </anypoint-input>`;
  }

  _arrayTemplate() {
    const { model, name, readonly, _arrayValue, outlined, legacy } = this;
    const values = _arrayValue || [];
    const itemLabel = model.schema.inputLabel || 'Parameter value';
    return html`
    <label class="array-label">${itemLabel}</label>

    ${values.map((item, index) => html`
    <div class="array-item">
      <anypoint-input
        .value="${item.value}"
        ?required="${model.required}"
        .pattern="${model.schema.pattern}"
        .name="${name}"
        autovalidate
        .type="${model.schema.inputType}"
        .min="${model.schema.minimum}"
        .max="${model.schema.maximum}"
        .maxLength="${model.schema.maxLength}"
        .minLength="${model.schema.minLength}"
        nolabelfloat
        ?readonly="${readonly}"
        ?outlined="${outlined}"
        ?legacy="${legacy}"
        data-type="array"
        data-index="${index}"
        @input="${this._arrayValueHandler}">
        <label slot="label">${itemLabel}<label>
      </anypoint-input>
      ${index ? html`<anypoint-icon-button
        class="action-icon"
        data-index="${index}"
        ?outlined="${outlined}"
        ?legacy="${legacy}"
        @click="${this._removeArrayValue}"
        title="Remove array value"
        ?disabled="${this.readonly}">
        <iron-icon icon="arc:remove-circle-outline"></iron-icon>
      </anypoint-icon-button>` : undefined}
    </div>`)}
    <div class="add-action">
      <anypoint-button
        @click="${this.addEmptyArrayValue}"
        title="Add array velue button"
        ?disabled="${readonly}"
        ?outlined="${outlined}"
        ?legacy="${legacy}">
        <iron-icon class="action-icon" icon="arc:add-circle-outline" alt="Add array value icon"></iron-icon>
        Add array value
      </anypoint-button>
    </div>
    `;
  }

  render() {
    const { _isEnum, _isBoolean, _isInput, _isArray, _renderNillable } = this;
    return html`
    <div class="content">
      ${_isEnum ? this._enumTemplate() : undefined}
      ${_isBoolean ? this._booleanTemplate() : undefined}
      ${_isInput ? this._inputTemplate() : undefined}
      ${_isArray ? this._arrayTemplate() : undefined}

      ${_renderNillable ? html`<anypoint-checkbox
        ?disabled="${this.readonly}"
        class="nil-option"
        @checked-changed="${this._nillableChanged}">Nil</anypoint-checkbox>` : undefined}
    </div>`;
  }

  static get properties() {
    return {
      /**
       * View model generated for this view.
       *
       * @type {Array<Object>}
       */
      model: { type: Array },
      /**
       * Name of the form item
       */
      name: { type: String, reflect: true },
      /**
       * When set, prohibits inputs to have floating labels
       */
      noLabelFloat: { type: Boolean },
      /**
       * Enables outlined theme.
       */
      outlined: { type: Boolean, reflect: true },
      /**
       * Enables Anypoint legacy theme.
       */
      legacy: { type: Boolean, reflect: true },
      /**
       * Input's value.
       */
      value: { type: String },
      // Computed value, True if current item is a dropdown with values.
      _isEnum: { type: Boolean },
      // Computed value, True if current item is an regular input
      _isInput: { type: Boolean },
      // Computed value, True if current item is an array object
      _isArray: { type: Boolean },
      // Computed value, True if current item is an union with nill value.
      _isNillable: {
        type: Boolean,
        reflectToAttribute: true
      },
      // Computed value, True if current item is a boolean value
      _isBoolean: { type: Boolean },
      // A value of an array item (only if `isArray` is set)
      _arrayValue: { type: Array },
      /**
       * Set to indicate that the consol is required
       */
      required: { type: Boolean, reflect: true },
      /**
       * When set the editor is in read only mode.
       */
      readonly: { type: Boolean },
      // Computed value, renders nillable switch when needed.
      _renderNillable: { type: Boolean }
    };
  }

  get model() {
    return this._model;
  }

  set model(value) {
    const old = this._model;
    /* istanbul ignore if */
    if (value === old) {
      return;
    }
    this._model = value;
    this._modelChanged(value);
  }

  get value() {
    return this._value;
  }

  set value(value) {
    const old = this._value;
    /* istanbul ignore if */
    if (value === old) {
      return;
    }
    if (value === undefined || value === null || value === 'undefined') {
      value = '';
    }
    this._value = value;
    this.requestUpdate('value', old);
    this._isArrayChanged(this._isArray, value);
    const opts = {
      detail: {
        value
      }
    };
    this.dispatchEvent(new CustomEvent('changed', opts));
    this.dispatchEvent(new CustomEvent('value-changed', opts));
  }

  get _isArray() {
    return this.__isArray;
  }

  set _isArray(value) {
    const old = this.__isArray;
    /* istanbul ignore if */
    if (value === old) {
      return;
    }
    this.__isArray = value;
    this._renderNillable = this._computeRenderNillable(this._isNillable, value);
    this._isArrayChanged(value, this.value);
    if (value) {
      this.setAttribute('isarray', '');
    } else {
      this.removeAttribute('isarray');
    }
  }

  get _isNillable() {
    return this.__isNillable;
  }

  set _isNillable(value) {
    const old = this.__isNillable;
    /* istanbul ignore if */
    if (value === old) {
      return;
    }
    this.__isNillable = value;
    this._renderNillable = this._computeRenderNillable(value, this._isArray);
    if (value) {
      this.setAttribute('isnillable', '');
    } else {
      this.removeAttribute('isnillable');
    }
  }

  constructor() {
    super();
    this._isInput = true;
    this.value = '';
  }

  /**
   * Resets UI state variables
   */
  _resetStates() {
    this._isEnum = false;
    this._isInput = false;
    this._isArray = false;
    this._isBoolean = false;
    this._isNillable = false;
  }

  // Sets the template depending on model configuration
  _modelChanged(model) {
    this._resetStates();
    if (!model) {
      return;
    }
    const schema = model.schema;
    switch (true) {
      case schema.isEnum:
        this._isEnum = true;
        break;
      case schema.isArray:
        this._prepareArraySchema(model);
        break;
      case schema.isBool:
        this._isBoolean = true;
        break;
      default:
        this._isInput = true;
    }
    this._isNillable = !!schema.isNillable;
  }
  /**
   * Sets `arrayValue` from model's value.
   *
   * @param {Object} model ARC amf view model.
   */
  _prepareArraySchema(model) {
    this._isArray = true;
    let value;
    if (model.value && model.value instanceof Array) {
      value = model.value.map((item) => {
        return {
          value: item
        };
      });
    } else {
      value = [];
    }
    this._arrayValue = value;
  }

  // Sets array values if needed
  _isArrayChanged(isArray) {
    if (this.__internalChange) {
      return;
    }
    const v = this.value;
    if (!v || !isArray) {
      this._arrayValue = undefined;
      return;
    }
    this._arrayValue = this._itemsForArray(v);
  }
  /**
   * The `dom-repeat` requires an object to properly support changes.
   * In order to do this simple values has to be transformed into objects.
   *
   * @param {Array<String>} value An array of values.
   * @return {Array}
   */
  _itemsForArray(value) {
    let result = [];
    if (value instanceof Array) {
      result = value.map(function(item) {
        return {
          value: item
        };
      });
    } else {
      result.push({
        value
      });
    }
    return result;
  }
  // Handles array value change and sets the `value` property.
  _arrayValueChanged() {
    let arr = this._arrayValue;
    if (arr) {
      arr = arr.map((item) => item.value);
    }
    this.__internalChange = true;
    this.value = arr;
    this.__internalChange = false;
  }
  /**
   * Adds new element to the array value.
   * @return {Number} Index of the value in the values array.
   * Note that the index may change over time if the user remove any value.
   */
  addEmptyArrayValue() {
    const items = this._arrayValue || [];
    items.push({
      value: ''
    });
    this._arrayValue = [...items];
    return this._arrayValue.length - 1;
  }
  /**
   * Removes an array value for given index.
   * @param {Number} index A position of the value in the array
   */
  removeArrayValue(index) {
    const value = this._arrayValue;
    value.splice(index, 1);
    this._arrayValue = [...value];
    this._arrayValueChanged();
  }

  // Removes item from array value.
  _removeArrayValue(e) {
    const index = Number(e.currentTarget.dataset.index);
    if (index !== index) {
      return;
    }
    this.removeArrayValue(index);
  }
  /**
   * Fallback validator if form validator is unavailable.
   *
   * @return {Boolean} True if the constrol is valid.
   */
  _defaultValidator() {
    const m = this.model;
    if (!m) {
      return true;
    }
    if (!m.required) {
      return true;
    }
    return !!m.value;
  }

  _getValidity() {
    if (this._nilEnabled) {
      return true;
    }
    switch (true) {
      case this._isInput:
        {
          const input = this.shadowRoot.querySelector('anypoint-input[data-type="input"]');
          return input ? input.validate() : this._defaultValidator();
        }
      case this._isBoolean:
        {
          const bool = this.shadowRoot.querySelector('anypoint-dropdown-menu[data-type="boolean"]');
          return bool ? bool.validate() : this._defaultValidator();
        }
      case this._isEnum:
        {
          const en = this.shadowRoot.querySelector('anypoint-dropdown-menu[data-type="enum"]');
          return en ? en.validate() : this._defaultValidator();
        }
      case this._isArray:
        {
          const inputs = this.shadowRoot.querySelectorAll('anypoint-input[data-type="array"]');
          for (let i = 0; i < inputs.length; i++) {
            if (!inputs[i].validate()) {
              return false;
            }
          }
          return true;
        }
      default:
        return this._defaultValidator();
    }
  }
  /**
   * Computes value for `_renderNillable` property.
   *
   * @param {Boolean} isNillable
   * @param {Boolean} isArray
   * @return {Boolean}
   */
  _computeRenderNillable(isNillable, isArray) {
    return !!isNillable && !isArray;
  }
  /**
   * Controls value and input state when "nil" checkbox's value change.
   * @param {CustomEvent} e
   */
  _nillableChanged(e) {
    const { value } = e.detail;
    this._nilEnabled = value;
    const input = this._getInput();
    if (input) {
      input.disabled = value;
    }
    if (value) {
      this._oldNilValue = this.value;
      this.value = 'nil';
    } else {
      if (this._oldNilValue) {
        this.value = this._oldNilValue;
        this._oldNilValue = undefined;
      } else if (this.value === 'nil') {
        this.value = '';
      }
    }
  }
  /**
   * Finds input element in the DOM
   * @return {Element|undefined} An element that represents the main UI input
   * element or undefined for array types.
   */
  _getInput() {
    if (this._isEnum) {
      return this.shadowRoot.querySelector('anypoint-dropdown-menu[data-type="enum"]');
    }
    if (this._isBoolean) {
      return this.shadowRoot.querySelector('anypoint-dropdown-menu[data-type="boolean"]');
    }
    if (this._isInput) {
      return this.shadowRoot.querySelector('anypoint-input[data-type="input"]');
    }
  }
  /**
   * Computes value for anypoint-input's always-float-label attribute.
   * It forces label float for some types of inputs.
   * @param {Boolean} inputFloatLabel
   * @param {String} inputType
   * @return {Boolean}
   */
  _computeAlwaysFloatLabel(inputFloatLabel, inputType) {
    if (inputFloatLabel) {
      return inputFloatLabel;
    }
    return [
      'date', 'datetime', 'datetime-local', 'month', 'time', 'week', 'file'
    ].indexOf(inputType) !== -1;
  }

  _listSelectionHandler(e) {
    if (this._isBoolean) {
      this.value = e.target.selected === 'true' ? true : false;
    } else {
      this.value = e.target.selected;
    }
  }

  _inputHandler(e) {
    this.value = e.target.value;
  }

  _arrayValueHandler(e) {
    const index = Number(e.target.dataset.index);
    if (index !== index) {
      return;
    }
    const value = this._arrayValue;
    value[index].value = e.target.value;
    this._arrayValue = [...value];
    this._arrayValueChanged();
  }
}

window.customElements.define('api-property-form-item', ApiPropertyFormItem);
