{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "An element that renders a form input to edit API type value.\n\nThis element is to replace deprecated `raml-type-form-input` that has\nthe same functionality but works with RAML data only.\n\n**If you need an element that works with Polymer 1.0, use old `raml-type-form-input` element**\n\nIt accespt ARC view model generated by either `api-headers-editr`\nor `api-url-data-model`. The model is generated using\n`api-view-model-transformer` that transforms AMF `json/ld` API model\ninto data model consumable by ARC UI elements.\n\n### Example\n\n```html\n<api-property-form-item model='{\"inputLabel\": \"Enter value\"}'\n name=\"propertyName\" value=\"{{value}}\"></raml-type-form-input>\n```\n\n### Styling\n\n`<raml-type-form-input>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--raml-type-form-input` | Mixin applied to the element | `{}`\n`--api-property-form-item-input-label-color` | Input's label color | `rgba(0, 0, 0, 0.74)`\n`--api-property-form-item-input-label-required-color` | Input's label color when required | `rgba(0, 0, 0, 0.74)`\n`--from-row-action-icon-color` | Theme variable, color of the action icon button | `--icon-button-color` or `rgba(0, 0, 0, 0.74)`\n`--from-row-action-icon-color-hover` | Theme variable, color of the action icon button when hovered | `--accent-color` or `rgba(0, 0, 0, 0.74)`\n`--from-row-action-icon-opacity` | Opacity of the action icon button | `0.54`\n`--from-row-action-icon-opacity` | Opacity of the action icon button when hovered | `0.74`\n`--arc-font-caption` | Theme mixin, applied to array values label | `{}`\n`--raml-type-form-input-array-border-color` | Border color of the element when it is array type item | `rgba(0, 0, 0, 0.14)`\n\nAlso, use mixins and variables for `paper-input`, `paper-dropdown-menu`, `paper-listbox` and `paper-item` to style this element.\n\n## Changes in v 2\n\nProperties `isEnum`, `isInput`, `isArray`, `isBoolean` and `arrayValue`\nare now read only.",
      "summary": "",
      "path": "api-property-form-item.js",
      "properties": [
        {
          "name": "model",
          "type": "Array.<Object>",
          "description": "View model generated for this view.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_modelChanged\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Name of the form item",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 203,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "value",
          "type": "string | null | undefined",
          "description": "Input's value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "isEnum",
          "type": "boolean | null | undefined",
          "description": "Computed value, True if current item is a dropdown with values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "isInput",
          "type": "boolean | null | undefined",
          "description": "Computed value, True if current item is an regular input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 6
            },
            "end": {
              "line": 221,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "isArray",
          "type": "boolean | null | undefined",
          "description": "Computed value, True if current item is an array object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 6
            },
            "end": {
              "line": 227,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "isNillable",
          "type": "boolean | null | undefined",
          "description": "Computed value, True if current item is an union with nill value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "isBoolean",
          "type": "boolean | null | undefined",
          "description": "Computed value, True if current item is a boolean value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 6
            },
            "end": {
              "line": 238,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "arrayValue",
          "type": "Array | null | undefined",
          "description": "A value of an array item (only if `isArray` is set)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 6
            },
            "end": {
              "line": 243,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "noLabelFloat",
          "type": "boolean | null | undefined",
          "description": "When set, prohibits inputs to have floating labels",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "Set to indicate that the consol is required",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 6
            },
            "end": {
              "line": 254,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "When set the editor is in read only mode.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_renderNillable",
          "type": "boolean | null | undefined",
          "description": "Computed value, renders nillable switch when needed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 6
            },
            "end": {
              "line": 263,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_resetStates",
          "description": "Resets UI state variables",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 276,
              "column": 2
            },
            "end": {
              "line": 282,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_modelChanged",
          "description": "Sets the template depending on model configuration",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 2
            },
            "end": {
              "line": 305,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_prepareArraySchema",
          "description": "Sets `arrayValue` from model's value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 311,
              "column": 2
            },
            "end": {
              "line": 324,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "ARC amf view model."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isArrayChanged",
          "description": "Sets array values if needed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 327,
              "column": 2
            },
            "end": {
              "line": 337,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isArray"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_itemsForArray",
          "description": "The `dom-repeat` requires an object to properly support changes.\nIn order to do this simple values has to be transformed into objects.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 345,
              "column": 2
            },
            "end": {
              "line": 359,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Array.<String>",
              "description": "An array of values."
            }
          ],
          "return": {
            "type": "Array"
          }
        },
        {
          "name": "_arrayValueChanged",
          "description": "Handles array value change and sets the `value` property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 361,
              "column": 2
            },
            "end": {
              "line": 371,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "addEmptyArrayValue",
          "description": "Adds new element to the array value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 377,
              "column": 2
            },
            "end": {
              "line": 388,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Number",
            "desc": "Index of the value in the values array.\nNote that the index may change over time if the user remove any value."
          }
        },
        {
          "name": "removeArrayValue",
          "description": "Removes an array value for given index.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 393,
              "column": 2
            },
            "end": {
              "line": 396,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "A position of the value in the array"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeArrayValue",
          "description": "Removes item from array value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 399,
              "column": 2
            },
            "end": {
              "line": 403,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_defaultValidator",
          "description": "Fallback validator if form validator is unavailable.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 409,
              "column": 2
            },
            "end": {
              "line": 418,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "True if the constrol is valid."
          }
        },
        {
          "name": "_getValidity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 419,
              "column": 2
            },
            "end": {
              "line": 444,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeRenderNillable",
          "description": "Computes value for `_renderNillable` property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 452,
              "column": 2
            },
            "end": {
              "line": 454,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isNillable",
              "type": "Boolean"
            },
            {
              "name": "isArray",
              "type": "Boolean"
            }
          ],
          "return": {
            "type": "Boolean"
          }
        },
        {
          "name": "_nillableChanged",
          "description": "Controls value and input state when \"nil\" checkbox's value change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 459,
              "column": 2
            },
            "end": {
              "line": 477,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getInput",
          "description": "Finds input element in the DOM",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 483,
              "column": 2
            },
            "end": {
              "line": 493,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(Element | undefined)",
            "desc": "An element that represents the main UI input\nelement or undefined for array types."
          }
        },
        {
          "name": "_computeAlwaysFloatLabel",
          "description": "Computes value for paper-input's always-float-label attribute.\nIt forces label float for some types of inputs.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 501,
              "column": 2
            },
            "end": {
              "line": 508,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inputFloatLabel",
              "type": "Boolean"
            },
            {
              "name": "inputType",
              "type": "String"
            }
          ],
          "return": {
            "type": "Boolean"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 62,
          "column": 0
        },
        "end": {
          "line": 509,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ApiElements.ApiPropertyFormItem",
      "attributes": [
        {
          "name": "model",
          "description": "View model generated for this view.",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array.<Object>"
        },
        {
          "name": "name",
          "description": "Name of the form item",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 203,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value",
          "description": "Input's value.",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "is-enum",
          "description": "Computed value, True if current item is a dropdown with values.",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "is-input",
          "description": "Computed value, True if current item is an regular input",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 6
            },
            "end": {
              "line": 221,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "is-array",
          "description": "Computed value, True if current item is an array object",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 6
            },
            "end": {
              "line": 227,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "is-nillable",
          "description": "Computed value, True if current item is an union with nill value.",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "is-boolean",
          "description": "Computed value, True if current item is a boolean value",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 6
            },
            "end": {
              "line": 238,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "array-value",
          "description": "A value of an array item (only if `isArray` is set)",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 6
            },
            "end": {
              "line": 243,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "no-label-float",
          "description": "When set, prohibits inputs to have floating labels",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 27
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "required",
          "description": "Set to indicate that the consol is required",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 6
            },
            "end": {
              "line": 254,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "readonly",
          "description": "When set the editor is in read only mode.",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 23
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "api-property-form-item",
      "mixins": [
        "IronValidatableBehavior"
      ]
    }
  ]
}
